@use './common.module.scss';

.audioPreview {
  // CSS Variables for easy theming of the audio player
  // These are dynamically set in the component for the synth effect
  // --audio-primary-color: #3498db; // Example, will be overridden
  // --audio-secondary-color: #2980b9; // Example, will be overridden

  // Static variables for the player's look and feel
  --player-bg: rgba(25, 35, 55, 0.85); // Dark blueish background
  --player-bg-lighten: rgba(35, 45, 65, 0.85);
  --player-border-color: rgba(var(--accent-color-rgb, 59, 130, 246), 0.3); // Blueish border
  --text-light: #e0e0e0;
  --text-medium: #b0b0b0;
  --control-button-size: 50px;
  --skip-button-size: 40px;
  --icon-color-light: #ffffff;
  --icon-color-primary: var(--audio-primary-color);
  --shadow-light: rgba(0, 0, 0, 0.2);
  --shadow-strong: rgba(0, 0, 0, 0.4);
  --border-radius-main: 16px;
  --border-radius-controls: 50%; // For fully rounded buttons

  display: flex;
  flex-direction: column;
  width: 100%;
  max-width: 600px; // Slightly more compact
  margin: 2rem auto;
  padding: 1.5rem;
  background: var(--player-bg);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  border-radius: var(--border-radius-main);
  border: 1px solid var(--player-border-color);
  box-shadow: 0 8px 32px var(--shadow-strong);
  color: var(--text-light);
  transition: all 0.3s ease;

  // For the dynamic synth background effect (applied to ::before or a dedicated bg element if needed)
  position: relative;
  overflow: hidden; // Keep child elements like visualizer contained if they use absolute positioning

  &::before { // This can be used for the synth background if canvas isn't full bg
    content: '';
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    background: linear-gradient(135deg, var(--audio-primary-color), var(--audio-secondary-color));
    opacity: 0.1; // Subtle effect, main visualizer is on canvas
    z-index: -1;
    transition: opacity 0.5s ease;
  }
}

.audioHeader {
  text-align: center;
  margin-bottom: 1rem;
  .fileName {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-light);
    word-break: break-all;
    margin: 0;
  }
}

.audioInfo {
  text-align: center;
  margin-bottom: 1.5rem;
  h3 { // Filename display within the player body
    font-size: 1.1rem;
    font-weight: 500;
    color: var(--text-light);
    margin: 0 0 0.25rem 0;
    word-break: break-all;
  }
  p { // Mime type display
    font-size: 0.8rem;
    color: var(--text-medium);
    margin: 0;
    text-transform: uppercase;
  }
}

.visualizerContainer {
  height: 150px; // Adjust as needed
  width: 100%;
  margin-bottom: 1.5rem;
  position: relative;
  background-color: rgba(0, 0, 0, 0.2); // Darker area for visualizer
  border-radius: calc(var(--border-radius-main) - 4px);
  overflow: hidden; // Important for canvas
  display: flex;
  align-items: center;
  justify-content: center;
}

.visualizerCanvas {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
}

.visualizerControls {
  position: absolute;
  z-index: 10; // Above canvas
  display: flex;
  align-items: center;
  gap: 1.5rem; // Space between play and skip buttons
  background-color: rgba(0,0,0,0.2);
  padding: 0.75rem 1.5rem;
  border-radius: 50px; // Pill shape for the group
}

.controlButton {
  background: transparent;
  border: none;
  color: var(--icon-color-light);
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.2s ease, color 0.2s ease;

  &:hover {
    transform: scale(1.1);
    color: var(--audio-primary-color);
  }

  &.playButton {
    width: var(--control-button-size);
    height: var(--control-button-size);
    background-color: var(--audio-primary-color);
    border-radius: var(--border-radius-controls);
    box-shadow: 0 4px 12px rgba(var(--audio-primary-color), 0.4);

    svg {
      color: var(--icon-color-light); // Icon color for play button
    }
    .playIcon { // Specific class for FaPlay if needed for centering
        margin-left: 3px; // Nudge play icon for visual center
    }

    &:hover {
      background-color: var(--audio-secondary-color);
      box-shadow: 0 6px 16px rgba(var(--audio-secondary-color), 0.5);
    }
  }

  &.skipButton {
    width: var(--skip-button-size);
    height: var(--skip-button-size);
    background-color: rgba(var(--audio-primary-color-rgb, 52, 152, 219), 0.2); // Lighter, themed
    border-radius: var(--border-radius-controls);
    svg {
      color: var(--audio-primary-color); // Themed icon color
    }
    &:hover {
      background-color: rgba(var(--audio-primary-color-rgb, 52, 152, 219), 0.4);
      svg {
        color: var(--icon-color-light);
      }
    }
  }
}

.skipButtonWrapper {
  // If any specific wrapper styling is needed around skip buttons
}

.seekContainer {
  width: 100%;
  margin-bottom: 1.5rem;
  position: relative; // For absolute positioning of time markers
}

.seekBarBackground {
  width: 100%;
  height: 6px;
  background-color: var(--player-bg-lighten);
  border-radius: 3px;
  overflow: hidden;
  position: relative;
}

.seekBarProgress {
  height: 100%;
  background-color: var(--audio-primary-color);
  border-radius: 3px;
}

.seekBar {
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  height: 20px; // Larger touch target
  background: transparent;
  cursor: pointer;
  position: absolute;
  top: -7px; // Align over visual bar
  left: 0;
  margin: 0;

  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    background: var(--icon-color-light);
    border-radius: 50%;
    border: 2px solid var(--audio-primary-color);
    margin-top: 2px; // Center on the track height
    transition: transform 0.2s ease;
    &:hover {
      transform: scale(1.2);
    }
  }
  &::-moz-range-thumb {
    width: 16px;
    height: 16px;
    background: var(--icon-color-light);
    border-radius: 50%;
    border: 2px solid var(--audio-primary-color);
    transition: transform 0.2s ease;
    &:hover {
      transform: scale(1.2);
    }
  }
}

.seekTimeMarkers {
  display: flex;
  justify-content: space-between;
  font-size: 0.75rem;
  color: var(--text-medium);
  margin-top: 0.5rem;
}

.fullWidthVolumeContainer {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.5rem 0; // Reduced padding
  margin-bottom: 1rem;
  width: 100%;
}

.volumeIcon {
  color: var(--text-medium);
  cursor: pointer;
  transition: color 0.2s ease;
  display: flex;
  align-items: center;
  &:hover {
    color: var(--audio-primary-color);
  }
  &.muted svg {
    color: var(--danger, #ef4444); // Use global danger color
  }
}

.volumeSlider {
  flex-grow: 1;
  -webkit-appearance: none;
  appearance: none;
  height: 6px;
  background: var(--player-bg-lighten);
  border-radius: 3px;
  outline: none;
  cursor: pointer;

  &::-webkit-slider-runnable-track {
    height: 6px;
    background: var(--player-bg-lighten); // Track should be distinct
    border-radius: 3px;
  }
  &::-moz-range-track {
    height: 6px;
    background: var(--player-bg-lighten);
    border-radius: 3px;
  }

  // This part styles the filled portion of the track
  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 14px;
    height: 14px;
    background: var(--icon-color-light);
    border-radius: 50%;
    border: 2px solid var(--audio-primary-color);
    margin-top: -4px; // Center thumb
    transition: transform 0.2s ease;
     &:hover {
      transform: scale(1.2);
    }
  }
   &::-moz-range-thumb {
    width: 14px;
    height: 14px;
    background: var(--icon-color-light);
    border-radius: 50%;
    border: 2px solid var(--audio-primary-color);
    transition: transform 0.2s ease;
     &:hover {
      transform: scale(1.2);
    }
  }
}
// Custom progress fill for volume slider (using the CSS variable)
.volumeSlider {
    background: linear-gradient(to right, var(--audio-primary-color) 0%, var(--audio-primary-color) var(--volume-percentage, 0%), var(--player-bg-lighten) var(--volume-percentage, 0%), var(--player-bg-lighten) 100%);
}


.volumeLevel {
  font-size: 0.75rem;
  color: var(--text-medium);
  min-width: 35px; // Ensure space for "100%"
  text-align: right;
}

.downloadContainer {
  margin-top: 1rem;
  text-align: center;
}

.downloadButton {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.6rem 1.2rem;
  background-color: transparent;
  color: var(--audio-primary-color);
  border: 1px solid var(--audio-primary-color);
  border-radius: 50px; // Pill shape
  text-decoration: none;
  font-size: 0.9rem;
  font-weight: 500;
  transition: all 0.2s ease;

  .downloadIcon svg {
     transition: transform 0.2s ease;
  }

  &:hover {
    background-color: var(--audio-primary-color);
    color: var(--icon-color-light);
    box-shadow: 0 2px 8px rgba(var(--audio-primary-color-rgb), 0.3);
    .downloadIcon svg {
        transform: scale(1.1);
    }
  }
}

.loading, .error {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  min-height: 200px; // Ensure it takes up space
  text-align: center;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid rgba(var(--audio-primary-color-rgb, 52, 152, 219), 0.2);
  border-top-color: var(--audio-primary-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 1rem;
}

.error {
  h3 {
    color: var(--danger, #ef4444); // Use global danger color
    margin-bottom: 0.5rem;
  }
  p {
    color: var(--text-medium);
    margin-bottom: 1rem;
  }
  .downloadButton { // Ensure download button in error state is also styled
    margin-top: 0.5rem;
  }
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

// Responsive adjustments
@media (max-width: 600px) {
  .audioPreview {
    margin: 1rem;
    padding: 1rem;
  }
  .audioHeader .fileName {
    font-size: 1.3rem;
  }
  .visualizerContainer {
    height: 120px;
  }
  .visualizerControls {
    gap: 1rem;
    padding: 0.5rem 1rem;
  }
  .controlButton.playButton {
    width: calc(var(--control-button-size) * 0.9);
    height: calc(var(--control-button-size) * 0.9);
  }
  .controlButton.skipButton {
    width: calc(var(--skip-button-size) * 0.9);
    height: calc(var(--skip-button-size) * 0.9);
  }
  .fullWidthVolumeContainer {
    flex-direction: column;
    gap: 0.5rem;
    align-items: stretch; // Make slider take full width
  }
  .volumeSlider {
    width: 100%;
  }
  .volumeLevel {
    text-align: center;
    min-width: auto;
  }
}

// The :root block below was causing the error and is removed
// as --audio-primary-color-rgb is now set via JavaScript.

// A helper class for the play icon if specific centering is needed via JS/TSX
.playIcon {
  // margin-left: 3px; // Example, already in .playButton svg section
}

// Default value for audioControlSizeDefault if used by JS to calculate icon sizes
// This is just a comment for context, actual value is used in TSX.
// styles.audioControlSizeDefault = '50px';
